syntax = "proto3";

package crocks.pb;

service RPC {
  // Basic Operations
  rpc Get(Key) returns (Response) {}
  rpc Put(KeyValue) returns (Response) {}
  rpc Delete(Key) returns (Response) {}
  rpc SingleDelete(Key) returns (Response) {}

  // Implemented as an RPC but currently there is no way to define a merge
  // operator, so it is not tested. It should work though.
  rpc Merge(KeyValue) returns (Response) {}

  // Wrapper around rocksdb::WriteBatch
  rpc Batch(stream BatchBuffer) returns (stream Response) {}

  // Wrapper around rocksdb::Iterator
  rpc Iterator(stream IteratorRequest) returns (stream IteratorResponse) {}

  // A shard is sent as a stream of MigrateResponse messages and can be
  // made up by multiple SST files. The last MigrateResponse message
  // of a certain file has the eof flag set to true. As the receiving
  // node gets messages, he appends the raw bytes to a file, and when
  // a message is marked as eof, he closes the file and ingests it.
  rpc Migrate(stream MigrateRequest) returns (stream MigrateResponse) {}
}

message Key {
  bytes key = 1;
  bool force = 2;
}

message KeyValue {
  bytes key = 1;
  bytes value = 2;
}

message BatchUpdate {
  enum Operation {
    PUT = 0;
    DELETE = 1;
    SINGLE_DELETE = 2;
    MERGE = 3;
    CLEAR = 4;
  }
  Operation op = 1;
  bytes key = 2;
  bytes value = 3;
}

message BatchBuffer {
  repeated BatchUpdate updates = 1;
}

message Response {
  int32 status = 1;
  bytes value = 2;  // Only used on Get()
}

message IteratorRequest {
  enum Operation {
    SEEK_TO_FIRST = 0;
    SEEK_TO_LAST = 1;
    SEEK = 2;
    SEEK_FOR_PREV = 3;
    NEXT = 4;
    PREV = 5;
  }
  Operation op = 1;
  bytes target = 2;  // Set only for SEEK and SEEK_FOR_PREV
}

message IteratorResponse {
  repeated KeyValue kvs = 1;
  bool done = 2;
  int32 status = 3;
}

message MigrateRequest {
  int32 shard = 1;
}

message MigrateResponse {
  bool empty = 1;
  bool eof = 2;
  bool finished = 3;
  bytes chunk = 4;
  bytes largest_key = 5;
}
